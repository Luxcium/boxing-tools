/enhance, TypeScript/NodeJS: I am trying to write a different promise you will help me. I want something that is right away compatible with the promise A+, or that is capable of becoming compatible. I want you to write a class that will have a name the is very descriptive (start by listing valid names for a class using Pascal Case Notation list as many names that are descriptive of what we are doing and that if following the best practices in terms of class naming conventions after creating an exhaustive list of valid names you will pick the one which is the most fit for our objective).

After listing the best candidate names you will then list each of the elements that are expected on the Promise Object (static and instance properties and methods)... In typescript the instance of the class must satisfied not only the Promise A+ the «open standard for sound, interoperable JavaScript promises» but must also respect the Interface PromiseLike<T> that typescript defines.

Our class that is compatible to all those concepts must differ in some aspects, it must implement the lazy version of what a promise should be, it must be cancelable, disposable, and it must implement all other things that should or could be implemented in such a class to augment the capabilities of what we are aiming to define...

I want you first not to write code but instead summarize what I have asked for, then list the names for the classe that are possible candidates (you will not choose the name right now. No, for the moment just create an exhaustive list of name candidates wit a short description to motivate your choice), then you will give an exhaustive and detailed exposé of all that the Promise A+ must satisfied to be fully valid, you will then list all that the TypeScript Promise interface want us to implement (we would resort to the native JavaScript Promise class or instance to delegate each of the methods and properties (static or instance) that are not to be modifier by ou new creation, then assess the fact that the  Interface PromiseLike<T> is already satisfied twice by what you already have enumerated...

then the fun part you will list any, every, each, and all part of the class that we are creating first listing your step by step thought process as one would do a brain storming, and this implies to list each choices one would be contemplating to decide which one is the best (you must write each statements in clear words that clearly demonstrate the path choses during the thought process up to a maximum of 5 choices) as you go writing each steps one after the other you will also write down the chin of thought, as a separate concept or element that must be completely detailed before moving to the next step and repeating the process while enumerating each elements that the class must have... Before the thought process you would have listed each other thing along with, lazy, cancelable, disposable [and you will have to extend that list in your initial summary and use one of more step of the thought process to create even more such aspects of our augmented class]. then after doing all that you would, in words only, describe the class and explain what else could be added then you would complete that detailed analysis with a recap of all that was said such that it would give you the opportunity to find more elements that have been missed in the first pass adding them as suggestions at the end of the thorough analysis... conclude with a synthesis of all that was said so far and a summary of what ill be done next (hinting to the fact that you want to write that class and each of the members for us in typescript in full in the upcoming intervention)

[/brainstorm, /feedback, /workout]
