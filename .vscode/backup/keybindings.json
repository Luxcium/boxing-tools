// Place your key bindings in this file to override the defaultsauto[]
[
    {
        "key": "ctrl+alt+s",
        "command": "workbench.action.files.saveAll"
    },
    {
        "key": "ctrl+shift+[Comma]",
        "command": "workbench.action.openSettingsJson"
    },
    {
        "key": "alt+m",
        "command": "workbench.action.toggleMaximizedPanel"
    },
    {
        "key": "ctrl+k ctrl+r",
        "command": "workbench.action.reloadWindow"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.reloadWindow",
        "when": "isDevelopment"
    },
    {
        "key": "ctrl+shift+a",
        "command": "-workbench.view.extension.azure"
    },
    {
        "key": "shift+alt+a",
        "command": "editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+a",
        "command": "-editor.action.blockComment",
        "when": "editorTextFocus && !editorReadonly"
    },
    {
        "key": "shift+alt+a",
        "command": "workbench.view.extension.azure",
        "when": "!editorTextFocus || editorReadonly"
    },
    {
        "key": "shift+alt+a",
        "command": "-workbench.view.extension.azure"
    },
    {
        "key": "ctrl+alt+2",
        "command": "workbench.action.moveEditorToNextGroup"
    },
    {
        "key": "ctrl+alt+right",
        "command": "-workbench.action.moveEditorToNextGroup"
    },
    {
        "key": "ctrl+alt+1",
        "command": "workbench.action.moveEditorToPreviousGroup"
    },
    {
        "key": "ctrl+alt+left",
        "command": "-workbench.action.moveEditorToPreviousGroup"
    },
    {
        "key": "ctrl+shift+-",
        "command": "workbench.files.action.collapseExplorerFolders"
    },
    {
        "key": "meta+c",
        "command": "workbench.action.terminal.copySelection",
        "when": "terminalFocus && terminalProcessSupported && terminalTextSelected"
    },
    {
        "key": "ctrl+shift+c",
        "command": "-workbench.action.terminal.copySelection",
        "when": "terminalFocus && terminalProcessSupported && terminalTextSelected"
    },
    {
        "key": "meta+v",
        "command": "workbench.action.terminal.paste",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+shift+v",
        "command": "-workbench.action.terminal.paste",
        "when": "terminalFocus && terminalProcessSupported"
    },
    {
        "key": "shift+alt+t",
        "command": "workbench.action.terminal.toggleTerminal",
        "when": "terminalFocus"
    },
    {
        "key": "shift+alt+t",
        "command": "workbench.action.terminal.focus",
        "when": "!terminalFocus"
    },
    {
        "key": "alt+v k",
        "command": "-codeValet.FilterKeep",
        "when": "config.codeValet.control.shortcuts && editorFocus"
    },
    {
        "key": "alt+v alt+k",
        "command": "codeValet.ToKebabCase"
    },
    {
        "key": "alt+v alt+l",
        "command": "codeValet.ToLower",
        "when": "config.codeValet.control.shortcuts && editorFocus"
    },
    {
        "key": "alt+v l",
        "command": "-codeValet.ToLower",
        "when": "config.codeValet.control.shortcuts && editorFocus"
    },
    {
        "key": "alt+v alt+u",
        "command": "codeValet.ToUpper",
        "when": "config.codeValet.control.shortcuts && editorFocus"
    },
    {
        "key": "alt+v u",
        "command": "-codeValet.ToUpper",
        "when": "config.codeValet.control.shortcuts && editorFocus"
    },
    {
        "key": "alt+v alt+d",
        "command": "codeValet.RemoveDuplicateLines"
    },
    {
        "key": "alt+v alt+r",
        "command": "codeValet.repeat",
        "when": "config.codeValet.control.shortcuts && editorFocus"
    },
    {
        "key": "alt+v r",
        "command": "-codeValet.repeat",
        "when": "config.codeValet.control.shortcuts && editorFocus"
    },
    {
        "key": "alt+v alt+p",
        "command": "codeValet.ToPascalCase"
    },
    {
        "key": "alt+v alt+c",
        "command": "codeValet.ToConstantCase"
    },
    {
        "key": "alt+v c",
        "command": "codeValet.ToCamelCase"
    },
    {
        "key": "alt+v alt+s",
        "command": "codeValet.ToSnakeCase"
    },
    {
        "key": "alt+v alt+t",
        "command": "codeValet.ToTitleCase"
    },
    {
        "key": "alt+v s",
        "command": "codeValet.ToSentenceCase"
    },
    {
        "key": "f2",
        "command": "-abracadabra.renameSymbol",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+f5",
        "command": "workbench.action.tasks.test",
        "when": "!inDebugMode"
    },
    {
        "key": "f5",
        "command": "workbench.action.tasks.build",
        "when": "!inDebugMode"
    },
    {
        "key": "ctrl+shift+b",
        "command": "-workbench.action.tasks.build"
    },
    {
        "key": "shift+alt+e",
        "command": "activitusbar.toggleExplorerView"
    },
    {
        "key": "shift+alt+p",
        "command": "workbench.actions.view.problems"
    },
    {
        "key": "ctrl+shift+m",
        "command": "-workbench.actions.view.problems"
    },
    {
        "key": "ctrl+shift+m",
        "command": "workbench.panel.markers.view.focus"
    },
    {
        "key": "shift+f5",
        "command": "npm-script.start",
        "when": "!inDebugMode"
    },
    {
        "key": "shift+alt+n",
        "command": "npm.focus"
    },
    {
        "key": "shift+alt+d",
        "command": "-abracadabra.moveStatementDown",
        "when": "editorTextFocus"
    },
    {
        "key": "f5",
        "command": "-workbench.action.debug.start",
        "when": "debuggersAvailable && !inDebugMode"
    },
    {
        "key": "shift+alt+right",
        "command": "editor.action.smartSelect.shrink",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+left",
        "command": "-editor.action.smartSelect.shrink",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+left",
        "command": "editor.action.smartSelect.expand",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+right",
        "command": "-editor.action.smartSelect.expand",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+n",
        "command": "workbench.action.editor.nextChange",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+f5",
        "command": "-workbench.action.editor.nextChange",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+j",
        "command": "workbench.action.editor.previousChange",
        "when": "editorTextFocus"
    },
    {
        "key": "shift+alt+f5",
        "command": "-workbench.action.editor.previousChange",
        "when": "editorTextFocus"
    },
    {
        "key": "alt+n",
        "command": "workbench.action.compareEditor.nextChange",
        "when": "textCompareEditorVisible"
    },
    {
        "key": "alt+f5",
        "command": "-workbench.action.compareEditor.nextChange",
        "when": "textCompareEditorVisible"
    },
    {
        "key": "alt+j",
        "command": "workbench.action.compareEditor.previousChange",
        "when": "textCompareEditorVisible"
    },
    {
        "key": "shift+alt+f5",
        "command": "-workbench.action.compareEditor.previousChange",
        "when": "textCompareEditorVisible"
    },
    {
        "key": "alt+f5",
        "command": "workbench.action.debug.run",
        "when": "debuggersAvailable && debugState != 'initializing'"
    },
    {
        "key": "ctrl+f5",
        "command": "-workbench.action.debug.run",
        "when": "debuggersAvailable && debugState != 'initializing'"
    },
    {
        "key": "f3",
        "command": "metalevelReferences.findReferencesByFile",
        "when": "filesExplorerFocus"
    },
    {
        "key": "f3",
        "command": "editor.action.nextMatchFindAction",
        "when": "editorFocus &&  !filesExplorerFocus"
    },
    {
        "key": "f3",
        "command": "-editor.action.nextMatchFindAction",
        "when": "editorFocus"
    },
    {
        "key": "f3",
        "command": "workbench.action.terminal.findNext",
        "when": "!filesExplorerFocus && (terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported)"
    },
    {
        "key": "f3",
        "command": "-workbench.action.terminal.findNext",
        "when": "terminalFindFocused && terminalProcessSupported || terminalFocus && terminalProcessSupported"
    },
    {
        "key": "ctrl+shift+w",
        "command": "workbench.action.terminal.kill",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+shift+w",
        "command": "workbench.action.closeWindow",
        "when": "!terminalFocus && !editorFocus"
    },
    {
        "key": "ctrl+shift+w",
        "command": "-workbench.action.closeWindow"
    },
    {
        "key": "ctrl+shift+w",
        "command": "extension.textFunctions",
        "when": "!terminalFocus"
    },
    {
        "key": "ctrl+shift+w",
        "command": "-extension.textFunctions"
    },
    {
        "key": "shift+alt+d",
        "command": "editor.action.moveSelectionToPreviousFindMatch",
        "when": "!viewContainer.workbench.view.debug.enabled"
    },
    {
        "key": "ctrl+shift+d",
        "command": "editor.action.addSelectionToPreviousFindMatch",
        "when": "!viewContainer.workbench.view.debug.enabled"
    },
    {
        "key": "ctrl+shift+alt+i",
        "command": "workbench.action.toggleDevTools",
        "when": "!isDevelopment"
    },
    {
        "key": "ctrl+shift+i",
        "command": "-workbench.action.toggleDevTools",
        "when": "isDevelopment"
    },
    {
        "key": "ctrl+alt+i",
        "command": "editor.action.inspectTMScopes"
    },
    {
        "key": "alt+ctrl+z",
        "command": "toggle",
        "args": {
            "id": "zoom",
            "value": [
                {
                    "window.zoomLevel": 1,
                    "editor.fontSize": 26,
                    "terminal.integrated.fontSize": 18,
                },
                {
                    "editor.fontSize": 20,
                    "terminal.integrated.fontSize": 13,
                    "window.zoomLevel": 2,
                },
                {
                    "editor.fontSize": 14,
                    "terminal.integrated.fontSize": 10,
                    "window.zoomLevel": 3,
                },
                {
                    "editor.fontSize": 10,
                    "terminal.integrated.fontSize": 8,
                    "window.zoomLevel": 4,
                },
                //           {
                //   /*            above are active
                //   "debug.showBreakpointsInOverviewRuler": true,
                //   */
                //   // "workbench.activityBar.visible": true,
                //   // "editor.glyphMargin": true,
                //   // "editor.lineNumbers": "on",
                //   // "editor.folding": true,
                //   // "breadcrumbs.enabled": true,
                //   // "workbench.editor.showTabs": true,
                //   // "workbench.statusBar.visible": true
                //   // "editor.overviewRulerBorder": true,
                //   // "window.zoomLevel": 2,
                //   // "editor.showFoldingControls": "always",
                //   // "editor.minimap.enabled": true,
                // },
                // {
                //   // "editor.folding": false,
                //   // "editor.lineNumbers": "off",
                //   // "editor.glyphMargin": false,
                //   // "workbench.activityBar.visible": false,
                //   // "workbench.editor.showTabs": false,
                //   // "breadcrumbs.enabled": false,
                //   // "workbench.statusBar.visible": false
                //   // "editor.overviewRulerBorder": false,
                //   // "window.zoomLevel": 5,
                //   // "editor.minimap.enabled": false,
                //   // "editor.showFoldingControls": "mouseover",
                // }
            ]
        }
    },
    {
        "key": "alt+meta+t",
        "command": "toggle",
        "when": "editorTextFocus",
        "args": {
            "id": "minimap",
            "value": [
                {
                    /*            above are active
          "debug.showBreakpointsInOverviewRuler": true,
          */
                    "workbench.activityBar.visible": true,
                    "editor.glyphMargin": true,
                    "editor.lineNumbers": "on",
                    "editor.folding": true,
                    "breadcrumbs.enabled": true,
                    "workbench.editor.showTabs": true,
                    "workbench.statusBar.visible": true
                    // "editor.overviewRulerBorder": true,
                    // "window.zoomLevel": 2,
                    // "editor.showFoldingControls": "always",
                    // "editor.minimap.enabled": true,
                },
                {
                    "editor.folding": false,
                    "editor.lineNumbers": "off",
                    "editor.glyphMargin": false,
                    "workbench.activityBar.visible": false,
                    "workbench.editor.showTabs": false,
                    "breadcrumbs.enabled": false,
                    "workbench.statusBar.visible": false
                    // "editor.overviewRulerBorder": false,
                    // "window.zoomLevel": 5,
                    // "editor.minimap.enabled": false,
                    // "editor.showFoldingControls": "mouseover",
                }
            ]
        }
    },
    {
        "key": "ctrl+alt+meta+t",
        "command": "toggle", // Toggle More
        "when": "editorTextFocus",
        "args": {
            "id": "Toggle More",
            "value": [
                {
                    /*            above are active
          "debug.showBreakpointsInOverviewRuler": true,
  "window.zoomLevel": 2,
  "editor.fontSize": 18,
  "terminal.integrated.fontSize": 12,
  "editor.fontFamily": "'VictorMono Nerd Font Mono', 'Fira Code iScript'",
  "terminal.integrated.fontFamily": "'TerminessTTF Nerd Font'",
  "terminal.integrated.fontWeight": "600",
  "terminal.integrated.fontWeightBold": "bold",
  "editor.fontLigatures": true,
  "editor.fontWeight": "600",
  //----10--------20--------30--------40--------50--------60--------70--------80 //
  "window.titleBarStyle": "custom",
  "workbench.editor.titleScrollbarSizing": "large",
  "terminal.integrated.tabs.title": "${task}${process}", // † Scientia es lux principium✨ ™
  "window.title": "° † Scientia es lux principium✨ ™ ° ${dirty}${activeEditorShort}${separator}${rootName}",
  "window.titleSeparator": " - ",
  "workbench.editor.untitled.labelFormat": "name",
  "code-runner.showRunIconInEditorTitleMenu": true,
  "code-runner.showStopIconInEditorTitleMenu": true,
  "window.menuBarVisibility": "visible",
  "workbench.iconTheme": "material-icon-theme",
  "editor.inlineSuggest.enabled": true,
  "editor.minimap.renderCharacters": false,
  "editor.minimap.showSlider": "always",
  "eslint.quiet": true,
  "npm.packageManager": "pnpm",
  workbench.action.toggleFullScreen
          */
                    "workbench.activityBar.visible": true,
                    "editor.glyphMargin": true,
                    "editor.lineNumbers": "on",
                    "window.commandCenter": true,
                    "editor.folding": true,
                    "breadcrumbs.enabled": true,
                    "workbench.editor.showTabs": true,
                    "workbench.statusBar.visible": true,
                    "editor.overviewRulerBorder": true,
                    // "window.zoomLevel": 2,
                    // "editor.showFoldingControls": "always",
                    "editor.minimap.enabled": true,
                },
                {
                    "editor.folding": false,
                    "editor.lineNumbers": "off",
                    "editor.glyphMargin": false,
                    "workbench.activityBar.visible": false,
                    "workbench.editor.showTabs": false,
                    "breadcrumbs.enabled": false,
                    "workbench.statusBar.visible": false,
                    "editor.overviewRulerBorder": false,
                    // "window.zoomLevel": 5,
                    "editor.minimap.enabled": false,
                    // "editor.showFoldingControls": "mouseover",
                }
            ]
        }
    },
    {
        "key": "shift+f11",
        "command": "extension.node-debug.startWithStopOnEntry",
        "when": "!inDebugMode && debugConfigurationType == 'node' || !inDebugMode && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && debugConfigurationType == 'pwa-node'"
    },
    {
        "key": "f11",
        "command": "-extension.node-debug.startWithStopOnEntry",
        "when": "!inDebugMode && debugConfigurationType == 'node' || !inDebugMode && debugConfigurationType == 'pwa-extensionHost' || !inDebugMode && debugConfigurationType == 'pwa-node'"
    },
    {
        "key": "ctrl+n",
        "command": "explorer.newFile",
        "when": "filesExplorerFocus"
    },
    {
        "key": "ctrl+shift+n",
        "command": "explorer.newFolder",
        "when": "filesExplorerFocus"
    },
    {
        "key": "alt+a alt+f",
        "command": "abracadabra.convertFunctionDeclarationToArrowFunction",
        "when": "editorFocus"
    },
    {
        "key": "alt+c alt+a",
        "command": "clever.fastInsert.arrowFunction",
        "when": "editorFocus"
    },
    {
        "key": "f13",
        "command": "problems.action.showQuickFixes",
        "when": "problemFocus"
    },
    // {
    //   "key": "ctrl+[Period]",
    //   "command": "-problems.action.showQuickFixes",
    //   "when": "problemFocus"
    // },
    {
        "key": "f14",
        "command": "editor.action.triggerParameterHints",
        "when": "editorHasSignatureHelpProvider && editorTextFocus && !parameterHintsVisible"
    },
    {
        "key": "ctrl+shift+space",
        "command": "-editor.action.triggerParameterHints",
        "when": "editorHasSignatureHelpProvider && editorTextFocus"
    },
    {
        "key": "f14",
        "command": "showNextParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "alt+down",
        "command": "-showNextParameterHint",
        "when": "editorFocus && parameterHintsMultipleSignatures && parameterHintsVisible"
    },
    {
        "key": "ctrl+alt+e",
        "command": "emojisense.quickEmojitext",
        "when": "editorTextFocus && !terminalFocus"
    },
    {
        "key": "ctrl+shift+i",
        "command": "-emojisense.quickEmojitext",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+e",
        "command": "emojisense.quickEmojitextTerminal",
        "when": "!editorTextFocus &&terminalFocus"
    },
    {
        "key": "ctrl+shift+alt+i",
        "command": "-emojisense.quickEmojitextTerminal",
        "when": "terminalFocus"
    },
    {
        "key": "ctrl+shift+t",
        "command": "-extension.tableFunctions"
    },
    {
        "key": "ctrl+shift+b ",
        "command": "workbench.action.tasks.runTask",
        "args": "Full Build Task"
    },
    {
        "key": "ctrl+shift+j ctrl+shift+b",
        "command": "cmstead.jscodeformer.toggleArrowFunctionBraces"
    },
    {
        "key": "ctrl+shift+j f",
        "command": "cmstead.jscodeformer.moveFunctionIntoClass"
    },
    {
        "key": "ctrl+shift+j ctrl+shift+j",
        "command": "cmstead.jscodeformer.suggestAction"
    },
    {
        "key": "ctrl+alt+[Period]",
        "command": "editor.action.quickFix",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    // {
    //   "key": "ctrl+[Period]",
    //   "command": "-editor.action.quickFix",
    //   "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    // },
    // {
    //   "key": "f19",
    //   "command": "workbench.action.terminal.copySelection",
    //   "when": "terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected"
    // },
    // {
    //   "key": "ctrl+shift+c",
    //   "command": "-workbench.action.terminal.copySelection",
    //   "when": "terminalFocus && terminalHasBeenCreated && terminalTextSelected || terminalFocus && terminalProcessSupported && terminalTextSelected"
    // },
    // {
    //   "key": "f17",
    //   "command": "workbench.action.terminal.paste",
    //   "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    // },
    {
        "key": "ctrl+shift+v",
        "command": "-workbench.action.terminal.paste",
        "when": "terminalFocus && terminalHasBeenCreated || terminalFocus && terminalProcessSupported"
    },
    // {
    //   "key": "f18",
    //   "command": "ShortcutMenuBar.saveAll"
    // },
    {
        "key": "ctrl+shift+v",
        "command": "toggleVim",
        "when": "textInputFocus || editorTextFocus"
    },
    {
        "key": "ctrl+shift+v",
        "command": "-markdown.extension.closePreview",
        "when": "markdownPreviewFocus"
    },
    {
        "key": "ctrl+alt+d",
        "command": "workbench.action.toggleCommenting"
    },
    {
        "key": "alt+meta+a",
        "command": "workbench.action.toggleActivityBarVisibility"
    },
    {
        "key": "alt+meta+b",
        "command": "workbench.action.toggleStatusbarVisibility"
    },
    {
        "key": "ctrl+meta+b",
        "command": "workbench.action.toggleAuxiliaryBar"
    },
    {
        "key": "alt+i",
        "command": "emojisense.quickEmoji",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+i",
        "command": "-emojisense.quickEmoji",
        "when": "editorTextFocus"
    },
    {
        "key": "ctrl+alt+u",
        "command": "cursorRedo"
    },
    {
        "key": "ctrl+t",
        "command": "openInTerminal",
        "when": "explorerResourceIsFolder"
    },
    {
        "key": "ctrl+shift+w",
        "command": "extendedTerminalIntegration.closeActiveTerminal",
        "when": "terminalEditorFocus || terminalFocus"
    },
    {
        "key": "ctrl+l",
        "command": "workbench.debug.panel.action.clearReplAction",
        "when": "!textInputFocus"
    },
    {
        "key": "alt+d",
        "command": "editor.action.moveSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "ctrl+k ctrl+d",
        "command": "-editor.action.moveSelectionToNextFindMatch",
        "when": "editorFocus"
    },
    {
        "key": "shift+alt+d",
        "command": "-editor.detectLanguage",
        "when": "editorTextFocus && !notebookEditable"
    },
    {
        "key": "ctrl+shift+-",
        "command": "-workbench.action.navigateForward",
        "when": "canNavigateForward"
    },
    {
        "key": "ctrl+alt+k",
        "command": "-code-runner.runCustomCommand"
    },
    {
        "key": "ctrl+alt+k",
        "command": "-rest-client.cancel-request",
        "when": "editorTextFocus && editorLangId == 'plaintext'"
    },
    {
        "key": "ctrl+alt+k",
        "command": "-rest-client.cancel-request",
        "when": "editorTextFocus && editorLangId == 'http'"
    },
    {
        "key": "ctrl+meta+r",
        "command": "intelli-refactor.refactor",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "ctrl+shift+alt+t",
        "command": "-intelli-refactor.refactor",
        "when": "editorHasCodeActionsProvider && editorTextFocus && !editorReadonly"
    },
    {
        "key": "alt+t p",
        "command": "workbench.action.terminal.newWithProfile"
    },
    {
        "key": "ctrl+alt+up",
        "command": "workbench.action.moveEditorToAboveGroup"
    },
    {
        "key": "ctrl+alt+down",
        "command": "workbench.action.moveEditorToBelowGroup"
    },
    {
        "key": "alt+t alt+s",
        "command": "workbench.action.createTerminalEditorSide"
    },
    {
        "key": "alt+t w",
        "command": "workbench.action.terminal.newInActiveWorkspace"
    },
    {
        "key": "alt+t t",
        "command": "workbench.action.terminal.new"
    },
    {
        "key": "alt+t alt+b",
        "command": "ipynb.newUntitledIpynb"
    },
    {
        "key": "alt+t alt+t",
        "command": "workbench.action.createTerminalEditor"
    },
    {
        "key": "alt+e",
        "command": "editor.action.insertSnippet",
        "when": "editorTextFocus",
        "args": {
            "snippet": "export { ${CLIPBOARD/[\\;]//g} } from './${CLIPBOARD/[\\;]//g}';"
        }
    },
    {
        "key": "ctrl+k 2",
        "command": "editor.action.insertSnippet",
        "when": "editorTextFocus",
        "args": {
            "snippet": "export { ${CLIPBOARD/[\\;]//g} } from './${CLIPBOARD/[\\;]//g}';"
        }
    },
    {
        "key": "ctrl+k shift+2",
        "command": "editor.action.insertSnippet",
        "when": "editorTextFocus",
        "args": {
            "snippet": "export type { ${CLIPBOARD/[\\;]//g} } from './${CLIPBOARD/[\\;]//g}';"
        }
    },
    /*
    TM_SELECTED_TEXT *** The currently selected text or the empty string
    TM_CURRENT_LINE *** The contents of the current line
    TM_CURRENT_WORD *** The contents of the word under cursor or the empty string
    TM_LINE_INDEX *** The zero-index based line number
    TM_LINE_NUMBER *** The one-index based line number
    TM_FILENAME *** The filename of the current document
    TM_FILENAME_BASE *** The filename of the current document without its extensions
    TM_DIRECTORY *** The directory of the current document
    TM_FILEPATH *** The full file path of the current document
    RELATIVE_FILEPATH *** The relative (to the opened workspace or folder) file path of the current document
    CLIPBOARD *** The contents of your clipboard
    WORKSPACE_NAME *** The name of the opened workspace or folder
    WORKSPACE_FOLDER *** The path of the opened workspace or folder
    RANDOM *** 6 random Base-10 digits
    RANDOM_HEX *** 6 random Base-16 digits
    UUID *** A Version 4 UUID
   "${TM_SELECTED_TEXT/[\\;]/_/g}" Axios
  */
    {
        "key": "ctrl+shift+f5",
        "command": "npm-script.build"
    },
    {
        "key": "ctrl+r",
        "command": "typescript.restartTsServer"
    },
    {
        "key": "alt+meta+o",
        "command": "typescript.openTsServerLog"
    },
    {
        "key": "ctrl+k alt+r",
        "command": "workbench.action.files.revealActiveFileInWindows"
    },
    {
        "key": "ctrl+k r",
        "command": "-workbench.action.files.revealActiveFileInWindows"
    },
    {
        "key": "ctrl+k ctrl+r",
        "command": "-workbench.action.keybindingsReference"
    },
    {
        "key": "ctrl+k ctrl+r",
        "command": "-git.revertSelectedRanges",
        "when": "isInDiffEditor"
    },
    {
        "key": "ctrl+r",
        "command": "-workbench.action.openRecent"
    },
    {
        "key": "ctrl+k r",
        "command": "typescript.reloadProjects",
        "when": "!inQuickOpen || !inRecentFilesPicker"
    },
    {
        "key": "alt+[Quote]",
        "command": "editor.action.inlineSuggest.showNext"
    },
    {
        "key": "alt+;",
        "command": "editor.action.inlineSuggest.showPrevious"
    },
    {
        "key": "alt+[Slash]",
        "command": "editor.action.inlineSuggest.acceptNextWord"
    },
    {
        "key": "alt+o",
        "command": "outline.focus"
    },
    {
        "key": "end",
        "command": "editor.action.inlineSuggest.commit",
        "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorTabMovesFocus"
    },
    {
        "key": "tab",
        "command": "-editor.action.inlineSuggest.commit",
        "when": "inlineSuggestionHasIndentationLessThanTabSize && inlineSuggestionVisible && !editorTabMovesFocus"
    },
]
